{"version":3,"sources":["exam_5.11.2021/components/Button.tsx","exam_5.11.2021/components/Display.tsx","exam_5.11.2021/components/Count2.tsx","exam_5.11.2021/components/Span.tsx","exam_5.11.2021/components/Input.tsx","exam_5.11.2021/components/DisplayForSet.tsx","exam_5.11.2021/components/Set.tsx","exam_5.11.2021/components/CountOneDisplay.tsx","exam_5.11.2021/components/Count.tsx","exam_5.11.2021/components/CounterTwoDisplays.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","disabled","title","onClick","className","Display","data","style","color","count","max","min","message","Count2","dispatch","type","num","toggle","Span","Input","value","changeValue","setDisableSet","useEffect","onChange","e","valueInput","currentTarget","valueAsNumber","DisplayForSet","n","Set","useState","disableSet","CounterOneDisplay","Count","CounterTwoDisplays","App","variantCounters","setValue","valueL","localStorage","getItem","JSON","parse","setItem","stringify","action","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.268b2f0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype PropsType = {\r\n    disabled: boolean;\r\n    title: string;\r\n    onClick: () => void;\r\n    className?: string;\r\n}\r\nexport const Button = ({disabled, title, onClick, className}: PropsType) => {\r\n    return (\r\n\r\n        <button onClick={onClick}\r\n                disabled={disabled}\r\n                className={className}\r\n        >\r\n            {title}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport {ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n}\r\nexport const Display = ({data}: PropsType) => {\r\n    const style = {\r\n        color: data.count === data.max ? 'red' : '',\r\n    }\r\n    return (\r\n\r\n        <div className={'display'}>\r\n            <div className={'block_display'}>\r\n                {\r\n                    data.max <= data.min || data.min < 0\r\n                        ?\r\n                        <span className={'message error'}>Incorrect value!</span>\r\n                        :\r\n                        data.message\r\n                            ?\r\n                            <span className={'message'}>enter values and press 'set'</span>\r\n                            :\r\n                            <span className={'counter'} style={style}>{data.count}</span>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Button} from './Button';\r\nimport {Display} from './Display';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n}\r\nexport const Count2 = ({data, dispatch}: PropsType) => {\r\n\r\n    const onClickReset = () => dispatch({type: 'setInitialValue', num: data.min});\r\n    const onClickSet = () => dispatch({type: 'showMessageAndToggle', message: false, toggle: true});\r\n    const changeCount = () => dispatch({type: 'changeCount'});\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <Display\r\n                data={data}\r\n            />\r\n\r\n            <div className={'wrapper_buttons_count'}>\r\n                <Button title={'inc'}\r\n                        disabled={data.count === data.max || data.message}\r\n                        onClick={changeCount}\r\n                />\r\n                <Button title={'reset'}\r\n                        disabled={!(data.min >= 0 && data.count > data.min)}\r\n                        onClick={onClickReset}\r\n                />\r\n                <Button disabled={false} title={'set'} onClick={onClickSet}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string;\r\n}\r\nexport const Span = ({title}: PropsType) => {\r\n    return <span className={'span_value'}>{title}</span>\r\n}","import React, {ChangeEvent, useEffect} from 'react';\r\nimport {ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n    type: string;\r\n    value: number;\r\n    className: string;\r\n    changeValue: (n: number) => void;\r\n    setDisableSet: (b: boolean) => void;\r\n}\r\nexport const Input = ({\r\n                          type,\r\n                          value,\r\n                          className,\r\n                          changeValue,\r\n                          setDisableSet,\r\n                          data,\r\n                      }: PropsType) => {\r\n\r\n    useEffect(() => {\r\n        data.max <= data.min && setDisableSet(true)\r\n    },[]);\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const valueInput = e.currentTarget.valueAsNumber;\r\n        if (e.currentTarget) {\r\n            changeValue(valueInput);\r\n        }\r\n        setDisableSet(false);\r\n        valueInput < 0 && setDisableSet(true);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <span className={'span_input'}>\r\n            <input type={type}\r\n                   value={value}\r\n                   onChange={onChange}\r\n                   className={className}\r\n            />\r\n        </span>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Span} from './Span';\r\nimport {Input} from './Input';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n    setDisableSet: (b: boolean) => void;\r\n}\r\nexport const DisplayForSet = ({data, dispatch, setDisableSet,}: PropsType) => {\r\n    //\r\n    const changeValue = (n: number) => {\r\n        dispatch({type: 'setMinValue', num: n});\r\n    }\r\n    const changeValue2 = (n: number) => {\r\n        dispatch({type: 'setMaxValue', num: n});\r\n    }\r\n    return (\r\n        <div className={'display display_set'}>\r\n            <div className={'block_dis_set'}>\r\n                <Span title={'max value'}/>\r\n                <Input\r\n                    data={data}\r\n                    type={'number'}\r\n                    changeValue={changeValue2}\r\n                    value={data.max}\r\n                    className={data.min >= data.max ? 'error' : ''}\r\n                    setDisableSet={setDisableSet}\r\n                />\r\n            </div>\r\n            <div className={'block_dis_set'}>\r\n                <Span title={'start value'}/>\r\n                <Input\r\n                    data={data}\r\n                    type={'number'}\r\n                    changeValue={changeValue}\r\n                    value={data.min}\r\n                    className={data.min < 0 || data.min >= data.max ? 'error' : ''}\r\n                    setDisableSet={setDisableSet}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Button} from './Button';\r\nimport {DisplayForSet} from './DisplayForSet';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n}\r\nexport const Set = ({data, dispatch}: PropsType) => {\r\n    const [disableSet, setDisableSet] = useState(true);\r\n    const onClick = () => {\r\n        setDisableSet(true);\r\n        dispatch({type: 'showMessageAndToggle', message: false, toggle: false});\r\n    }\r\n    return (\r\n        <div className={'container'}>\r\n            <DisplayForSet\r\n                data={data}\r\n                dispatch={dispatch}\r\n                setDisableSet={setDisableSet}\r\n            />\r\n            <div className={'wrapper_buttons_count'}>\r\n                <Button disabled={disableSet}\r\n                        title={'set'}\r\n                        onClick={onClick}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import {Count2} from './Count2';\r\nimport {Set} from './Set';\r\nimport React from 'react';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    value: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n}\r\nexport const CounterOneDisplay = ({value, dispatch}: PropsType) => {\r\n    return (\r\n        <div className=\"counter_2\">\r\n            {\r\n                value.toggle\r\n                    ? <Set data={value} dispatch={dispatch}/>\r\n                    : <Count2 data={value} dispatch={dispatch}/>\r\n            }\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {Button} from './Button';\r\nimport {Display} from './Display';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    data: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n}\r\nexport const Count = ({data, dispatch}: PropsType) => {\r\n\r\n    const onClick = () => dispatch({type: 'setInitialValue', num: data.min});\r\n\r\n    const changeCount = () => dispatch({type: 'changeCount'});\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <Display\r\n                data={data}\r\n            />\r\n\r\n            <div className={'wrapper_buttons_count'}>\r\n                <Button title={'inc'}\r\n                        disabled={data.count === data.max || data.message}\r\n                        onClick={changeCount}\r\n                />\r\n                <Button title={'reset'}\r\n                        disabled={!(data.min >= 0 && data.count > data.min)}\r\n                        onClick={onClick}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Count} from './Count';\r\nimport {Set} from './Set';\r\nimport React from 'react';\r\nimport {ActionType, ValueType} from '../../App';\r\n\r\ntype PropsType = {\r\n    value: ValueType;\r\n    dispatch: (a: ActionType) => void;\r\n}\r\nexport const CounterTwoDisplays = ({value, dispatch}: PropsType) => {\r\n    return (\r\n        <div className={'counter_1'}>\r\n            <Count data={value}\r\n                   dispatch={dispatch}\r\n            />\r\n            <Set\r\n                dispatch={dispatch}\r\n                data={value}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from './exam_5.11.2021/components/Button';\nimport {CounterOneDisplay} from './exam_5.11.2021/components/CountOneDisplay';\nimport {CounterTwoDisplays} from './exam_5.11.2021/components/CounterTwoDisplays';\n\nexport type ActionType = {\n    type: 'setMaxValue' | 'setMinValue' | 'changeCount' | 'setInitialValue' | 'showMessageAndToggle';\n    message?: boolean;\n    toggle?: boolean;\n    num?: number;\n}\nexport type ValueType = {\n    min: number;\n    max: number;\n    count: number;\n    message: boolean;\n    variantCounters: boolean;\n    toggle: boolean;\n}\n\nexport function App() {\n\n    const [value, setValue] = useState<ValueType>({\n        min: 0,\n        max: 0,\n        count: 0,\n        message: true,\n        variantCounters: true,\n        toggle: true,\n    });\n\n    useEffect(() => {\n        setValue({...value, count: value.min})\n    }, [value.min])\n\n    useEffect(() => {\n        const valueL = localStorage.getItem('counter');\n\n        valueL && setValue({...value, max: JSON.parse(valueL).max, min: JSON.parse(valueL).min});\n    }, []);\n\n    useEffect(() => {\n        const valueL = {\n            max: value.max,\n            min: value.min\n        }\n        localStorage.setItem('counter', JSON.stringify(valueL));\n    }, [value.max, value.min]);\n\n    const dispatch: (a: ActionType) => void = (action) => {\n        switch (action.type) {\n            case 'setMinValue':\n                return action.num !== undefined && setValue({...value, min: action.num, message: true});\n            case 'setMaxValue':\n                return action.num !== undefined && setValue({...value, max: action.num, message: true});\n            case 'changeCount':\n                let count = value.count;\n                value.count <= value.max && count++;\n                return setValue({...value, count});\n            case 'setInitialValue':\n                return action.num !== undefined && setValue({...value, count: action.num});\n            case 'showMessageAndToggle':\n                return action.message !== undefined && action.toggle !== undefined && setValue({\n                    ...value,\n                    message: action.message,\n                    toggle: action.toggle\n                });\n            default:\n                return setValue(value);\n        }\n    }\n\n    const onClick = () => {\n        setValue({...value, variantCounters: !value.variantCounters});\n    }\n    return (\n        <div className=\"app\">\n            <Button disabled={false}\n                    title={value.variantCounters ? 'switch two displays' : 'switch one display'}\n                    onClick={onClick}\n                    className={'switch_counters'}\n            />\n            {value.variantCounters\n                ? <CounterOneDisplay value={value} dispatch={dispatch}/>\n                : <CounterTwoDisplays value={value} dispatch={dispatch}/>\n            }\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}